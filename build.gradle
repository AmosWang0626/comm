plugins {
    id 'java'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "com.palantir.docker" version "0.25.0"
    id "com.google.protobuf" version "0.8.12"
}

group 'com.amos'
version '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    // mavenCentral()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
}

dependencies {
    implementation 'org.springframework.data:spring-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
    compile 'com.alibaba:fastjson:1.2.70'
    compile 'com.caucho:hessian:4.0.60'
    compile 'com.google.guava:guava:27.1-jre'
    compile 'com.google.protobuf:protobuf-java:3.11.1'
    compile 'com.google.protobuf:protobuf-java-util:3.11.1'
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'redis.clients:jedis:3.0.1'
    compile 'io.springfox:springfox-swagger-ui:2.10.5'
    compile 'io.springfox:springfox-swagger2:2.10.5'
    compile 'io.springfox:springfox-spring-webflux:2.10.5'
}

docker {
    dependsOn build as Task
    name "dockerhub.amos.wang/${project.name}:${project.version}"
    files bootJar.archiveFile
    println('1.project.name >>>>> ' + project.name)
    println('2.archive_file >>>>> ' + bootJar.archiveFile.get())
    println('3.archive_file_name >>>>> ' + bootJar.archiveFileName.get())
    buildArgs(['JAR_FILE': "${bootJar.archiveFileName.get()}"])
    noCache true
}

sourceSets {
    main {
        proto {
            // default 'src/main/proto'
            srcDir 'src/main/protocol'
        }
        java {

        }
    }
    test {
        proto {
            // default 'src/test/proto'
            srcDir 'src/test/protocol'
        }
    }
}

protobuf {
    generatedFilesBaseDir = "$projectDir/out/generated"

    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

test {
    useJUnitPlatform()
}